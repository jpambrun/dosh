#!/bin/bash
#
# Copyright (c) 2017 GaÃ«l PORTAY <gael.portay@savoirfairelinux.com>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the MIT License.
#

# Called as program loader (shebang #!/usr/bin/dsh)
__="$_"
if [ "$__" = "$1" ]; then
	exec <"$1"
	shift
	set -- -s "$@"
	exec "$0" "$@"
elif [ "$__" = "$2" ]; then
	args="$1"
	shift
	exec <"$1"
	shift
	# shellcheck disable=SC2086
	set -- $args -s "$@"
	exec "$0" "$@"
fi

set -e

usage() {
	cat <<EOF
Usage: ${0##*/} [OPTIONS] [COMMAND] [ARG...]

Run a shell as user in a container and bind mount cwd.

Options:
      -c                        Read commands from command-line.
      -i                        Set interactive.
      -s                        Read commands from standard-input.

      -F or --dockerfile FILE   Path to the Dockerfile to use.
      -C or --directory DIR     Change to directory before doing anything else.
            --root              Run as root.
            --home              Bind mount home directory.
            --sh                Set /bin/sh as default shell.
                                Equivalent to set SHELL=/bin/sh.
            --build             Build image.
            --detach            Detach container.
            --exec CONTAINER    Execute in container.
      -N or --no-do             Do nothing; echo docker commands.
      -v or --verbose           Turn on verbose mode.
      -h or --help              Print usage.
EOF
}

docker_build() {
	# shellcheck disable=SC2086
	cat "$1" - <<EOF | $do docker build $buildopts --tag "$2" -
RUN groupadd --non-unique --gid ${GROUPS[0]} $USER \
 || addgroup -g ${GROUPS[0]} $USER
RUN useradd  --non-unique --gid ${GROUPS[0]} --uid $UID --create-home --home-dir /home/$USER --shell $SHELL $USER \
 || adduser  -G $USER -u $UID -h /home/$USER -s $SHELL -D $USER
EOF
}

opt_i=false
opt_s=false
opt_c=false
file="Dockerfile"
directory="."
root=false
dwd="/home/$USER"
home=false
build=false
detach=false
exec=false
buildopts="--quiet"
while [ "$#" -ne 0 ]; do
	if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
		usage
		exit 0
	elif [ "$1" = "-F" ] || [ "$1" = "--dockerfile" ]; then
		shift
		file="$1"
	elif [ "$1" = "-C" ] || [ "$1" = "--directory" ]; then
		shift
		directory="$1"
	elif [ "$1" = "--root" ]; then
		root=true
	elif [ "$1" = "--home" ]; then
		dwd="$PWD"
		home=true
	elif [ "$1" = "--sh" ]; then
		SHELL="/bin/sh"
	elif [ "$1" = "--build" ]; then
		build=true
	elif [ "$1" = "--detach" ]; then
		detach=true
	elif [ "$1" = "--exec" ]; then
		shift
		container="$1"
		exec=true
	elif [ "$1" = "-N" ] || [ "$1" = "--no-do" ]; then
		do=echo
	elif [ "$1" = "-v" ] || [ "$1" = "--verbose" ]; then
		buildopts=
	elif [ "$1" = "-c" ]; then
		shift
		opt_c=true
		break
	elif [ "$1" = "-i" ]; then
		opt_i=true
	elif [ "$1" = "-s" ]; then
		shift
		opt_s=true
		break
	elif [ "$1" = "--" ]; then
		shift
		break
	else
		break
	fi
	shift
done

# Change directory
cd "$directory"

# Run in a new container
if ! $exec; then
	# Rebuild or automatically build image if it does not exist
	hash="$(realpath "$file" | sha256sum - | cut -d' ' -f1)"
	tag="dsh-$hash"
	imageid="$(docker images -q "$tag")"
	if $build || [ -z "$imageid" ]; then
		docker_build "$file" "$tag" >&2
	fi

	# Detach container
	if $detach; then
		opts="--detach"
	# Remove the container at exit
	else
		opts="--rm"
	fi

	# Bind mount home
	if $home; then
		dwd="$PWD"
		opts+=" --volume $HOME:/home/$USER"
	# Bind mount current working directory
	else
		dwd="/home/$USER"
		opts+=" --volume $PWD:/home/$USER"
	fi
fi

# Set current user privileges
if ! $root; then
	opts+=" --user $UID:${GROUPS[0]}"
fi

# Set interactive
if $opt_i || $opt_s || [ "$#" -eq 0 ]; then
	opts+=" --interactive"

	# Allocate a pseudo-TTY if stdin/stderr are TTY
	if [ -t 0 ] && [ -t 2 ]; then
		opts+=" --tty"
	fi
fi

# Read command from stdin
if $opt_s; then
	set -- "$SHELL" -c "cd $dwd && $SHELL -s $(eval echo "${@// /\\\\ }")"
# Run command from arguments
elif $opt_c; then
	set -- "$SHELL" -c "cd $dwd && $SHELL -c '$*'"
# No command or invalid
else
	set -- "$SHELL" -c "cd $dwd && $SHELL $*"
fi

# Execute in existing container
# shellcheck disable=SC2086
if $exec; then
	exec $do docker exec $opts "$container" "$@"
# Run in a new container
else
	exec $do docker run $opts "$tag" "$@"
fi
